component test_model "Test model for linear stroke and load";  // компиляция и установка sudo halcompile --install test_model.comp
pin out bit dir_pos=0;
pin out bit dir_neg=0;
pin out float position=0.0;
pin out float load=0.0;
pin out float load_nom=0.0;
pin out float residual=0.0;
pin out float rnd;

pin in bit start=0 "ДЛЯ МОДЕЛИРОВАНИЯ: восходящий фронт, включающий ход модели";
pin in float timer=0.0 "ДЛЯ МОДЕЛИРОВАНИЯ: тактовый сигнал"; // периодический прямоугольный сигнал -1/+1

pin in float max_stroke=350.0 "Ход";
pin in float f1 "Начальное значение номинальной линейной нагрузки";
pin in float f2 "Конечное значение номинальной линейной нагрузки";
pin in bit reset "Сигнал сброса массива ошибок и аппроксимации";
pin in u32 n_of_points = 10;

variable float old_timer = 0.0;
variable float curr_time = 0.0; // накопленная сумма времени
variable float old_position = 0.0;
variable int start_old = 0;
variable float errors_pos[100];
variable float errors_neg[100];
variable int point_passed = 0;
variable int old_point_passed = 0;
variable float step = 0.0;
//option extra_setup yes;

function _;
license "GPL";
;;
#include <unistd.h>
#include <stdlib.h>

/*EXTRA_SETUP(){
    old_timer = 0.0;
    time = 0.0;
    start_old = 0;
    dir_neg = 0;
    dir_pos = 0;
}*/

FUNCTION(_) {

    if((start_old == 0) && (start == 1) && (dir_neg==0) && (dir_pos==0)) // триггер начала работы
    {
        step = max_stroke / n_of_points;
        dir_pos = 1;
        dir_neg = 0;
        old_point_passed = 0.0;
    }

    if( (dir_pos==1 && dir_neg==0) || (dir_pos==0 && dir_neg==1) ) { // приращение времени
        if (timer>0.0 &&  old_timer < 0.0) { // время прибавляется, если сигнал таймера поменял знак или по восходящему фронту
            //curr_time = curr_time + 1.0;
            if(dir_pos==1 && dir_neg==0) 
                curr_time = curr_time + 1.0;// приращение хода
            else if (dir_pos==0 && dir_neg==1)
                curr_time = curr_time - 1.0;// приращение хода
            
        }
    }     

    position = curr_time * 1.0;// приращение хода

    if((dir_pos==1) && (dir_neg==0) && (position >= max_stroke)) // смена хода при достижении максимальной точки
    {
        dir_pos = 0;
        dir_neg = 1;
        position = max_stroke;
    }

    if((dir_neg==1) && (dir_pos==0) && position<=0.0){ // остановка при возврате в ноль
        dir_neg=0;
        dir_pos=0;
        position=0.0;
        curr_time = 0.0;
    }

    point_passed = int(position/step);
    if((point_passed > old_point_passed) && (dir_pos==1) && (dir_neg==0)){// проверка прохождения точки
        errors_pos[point_passed] = load - load_nom;

    }
    else if((point_passed < old_point_passed) && (dir_neg==1) && (dir_pos==0)){
        errors_neg[point_passed] = load - load_nom;
    }

    if((dir_pos==1) && (dir_neg==0)) { // нагрузка при положительном ходе 
        load = position * position / 80.0 + 200.0 + (500.0 * drand48()-250.0);
        load_nom = f1 + (f2-f1)/max_stroke*position;
        residual = load - load_nom;
    }
    else if((dir_pos==0) && (dir_neg==1)) { // нагрузка при отрицательном ходе 
        load = - ( position - max_stroke ) * ( position - max_stroke ) / 80.0 + 2600.0 + (500.0 * drand48()-250.0);
        load_nom = f1 + (f2-f1)/max_stroke*position;
        residual = load - load_nom;
    }
    else{
        load = 0.0;
        load_nom = 0.0;
        residual = 0.0;
    }

    old_timer = timer; // запоминание предыдущего значения таймера
    start_old = start;
    old_position = position;
    old_point_passed = point_passed;
}