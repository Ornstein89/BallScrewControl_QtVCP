component approx2 "Аппроксимация параболой";  // компиляция и установка sudo halcompile --install test_model.comp

// на выход - аппроксимированная нагрузка и номинальная нагрузка (линейно от f1 до f2)
pin out float load_approx = 0.0;
pin out float load_nom = 0.0;

// входная кинематика
pin in bit dir_pos "1 если направление положительное";
pin in bit dir_neg "1 если направление отрицательное";
pin in float position=0.0 "Текущаяя позиция, мм";
pin in float position_max=0.0 "Максимальный ход, мм";
pin in float position_terminal = 50.0 "Граница терминальных эффектов, мм";

// параметры линейной номинальной функции
pin in float f1 "Начальное значение номинальной линейной нагрузки";
pin in float f2 "Конечное значение номинальной линейной нагрузки";

// параметры кубической аппроксимации на положительном ходе, dir_pos=1, dir_neg=0, load_approx = kpos1*position^2 + kpos2*position + kpos3
pin in float kpos1=0.0;
pin in float kpos2=0.0;
pin in float kpos3=0.0;

// параметры кубической аппроксимации на отрицательном ходе, dir_pos=0, dir_neg=1, load_approx = kneg1*position^2 + kneg2*position + kneg3
pin in float kneg1=0.0;
pin in float kneg2=0.0;
pin in float kneg3=0.0;

variable float pos_term2 = 0.0;
variable float load_term2 = 0.0;

function _;
license "GPL";
;;

/*EXTRA_SETUP(){
    old_timer = 0.0;
    time = 0.0;
    start_old = 0;
    dir_neg = 0;
    dir_pos = 0;
}*/

FUNCTION(_) {
    load_nom = f1 + (f2-f1)/position_max * position;
    if(dir_pos ==1 && dir_neg == 0){ // положительное направление
        if(position < position_terminal){ // вблизи стартового края
            load_approx = (kpos1*position_terminal*position_terminal + kpos2*position_terminal + kpos3)/position_terminal * position;
        }
        else if(position > (position_max-position_terminal) && position < position_max) { // вблизи конца хода
            pos_term2 = position_max - position_terminal;
            load_term2 = kpos1*pos_term2*pos_term2 + kpos2*pos_term2 + kpos3;
            load_approx = load_term2 - load_term2/position_terminal * (position-position_max+position_terminal);
        }
        else if(position >= position_max || position <= 0.0){ // за пределами хода
            load_approx = 0.0;
        }
        else // на основном интервале
        {
            load_approx = kpos1*position*position + kpos2*position + kpos3;
        }
    }
    else if(dir_pos ==0 && dir_neg == 1){ // отрицательное направление
        if(position < position_terminal){ // вблизи стартового края
            load_approx = (kneg1*position_terminal*position_terminal + kneg2*position_terminal + kneg3) / position_terminal * position;
        }
        else if(position > (position_max-position_terminal) && position < position_max) { // вблизи конца хода
            pos_term2 = position_max - position_terminal;
            load_term2 = kneg1*pos_term2*pos_term2 + kneg2*pos_term2 + kneg3;
            load_approx = load_term2 - load_term2/position_terminal * (position-position_max+position_terminal);
        }
        else if(position >= position_max || position <= 0.0){ // за пределами хода
            load_approx = 0.0;
        }
        else // на основном интервале
        {
            load_approx = kneg1*position*position + kneg2*position + kneg3;
        }
    }
    else if(dir_pos ==0 && dir_neg == 0){
        load_approx = 0.0;
    }
    else{
        load_approx = load_nom;
    }
}